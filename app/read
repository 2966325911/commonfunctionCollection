Binder大致的通信过程：
1.一个进程使用BINDERSETCONTEXT_MGR命令通过Binder驱动将自己注册成为ServiceManager
2.Server通过驱动向ServiceManger中注册Binder（Server中的Binder实体）,可以表明对外提供服务，
驱动为这个Binder创建位于内核中的实体点以及ServiceManager对实体的应用，将名字以及新建的引用
打包传给ServiceManager，ServiceManger将其填入查找表
3.Client通过名字，在Binder驱动的帮助下从ServiceManger中获取到对Binder实体的引用，通过对
这个引用就能实现和Server进程通信


Android绘制框架中，CPU的作用主要是负责了视图的测量，计算，布局记录，把内容计算成Polygons多变形或者Texture纹理，
GPU则主要负责把 Polygons或者Textture进行Rasterization栅格化，在屏幕上成像，开启硬件加速后，则GPU分担CPU的
计算任务，CPU会更加专注逻辑任务的处理减轻CPU的负担，是系统运行效率提高

硬件加速的原理：通过底层的软件代码，将CPU不擅长的图形计算转换为GPU专用指令，由GPU完成
硬件加速渲染，就是通过GPU来进行渲染，
硬件加速的过程中包括两个阶段：
（1）构建阶段　遍历所有视图，将需要绘制的操作缓存下来，交给单独的Render 线程使用GPU进行硬件加速绘制（这一阶段在主线程CPU构建）
（2）绘制阶段 调用OpenGl(即使用GPU)对构建好的视图进行绘制渲染，绘制的内容保存在Graphic Buffer并交给
SurfaceFlinger 显示

ThreadedRenderer的主要作用就是在主线程中(CPU)构建视图，并将构建好的视图通知到RenderThread让其使用OpenGl绘制渲染
只有支持并开启硬件加速的View才会关联有RenderNode，同时GPU不是支持所有的2D 所以GPU不支持的绘制命令只能通过软件方式来绘制渲染

布局中去掉重复或者不必要的background能够加快CPU的构建速度，同时能够减轻GPU渲染负担

FileLock进程文件锁，可以控制不同程序对同一文件的并发访问
如果是共享锁 则可以对同一文件进行读操作，不可以进行写操作，写操作会抛出异常
如果是独占所，则同一时间只能有一个线程对其进行读写操作，直到文件锁被释放掉，才可以被其他线程访问，对于操作并发是安全的

头条屏幕适配方案
density = 屏幕宽度 / 设计图宽度  一个view的显示为50dp 系统最终会转换为px  则 50*density
缩放系数为50 * density/屏幕宽度 与view的宽度 50/设计图宽度 一致  view的实际宽度 为 50/设计图宽度 * 50
全局修改density   dp = px / (dpi/160)  density = dpi/160  dpi(像素密度)为160的设备上1dp = 1px

ldpi   density = 0.75 分辨率 240 * 320   关系  dp = px/0.75
mdpi   density = 1    分辨率 320 * 480   dp = px/1
hdpi   density = 1.5  分辨率 480 * 800   dp = px/1.5
xhdpi  density = 2.0  分辨率 720 * 1280  dp = px/2.0
xxhdpi density = 3.0  分辨率 1080 * 1920 dp = px/3.0

Java中的IO流主要是面向流，阻塞式IO NIO主要是面向缓冲，非
阻塞式，支持选择器操作

通过Cache-control 和ETag的配合来实现Http的缓存机制 http2.0二进制分帧
三次握手中的第三次握手是为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误

并发锁的特点就是并发读读不互斥、并发读写互斥、并发写写互斥
线程进入读锁的前提条件是没有其他线程占用写请求或者有写请求但调用线程和持有锁的线程是同一个线程，
线程进入写锁的前提条件是没有其他线程占用读锁，也没有其他线程占用写锁

ReentrantReadWriteLock 不支持锁升级，只支持锁降级，锁降级是对统一线程从写锁变成读锁，锁升级就是
对同意线程从读锁变成写锁，读锁是多线程共享锁，写锁是多线程互斥锁，写锁的并发限制比读锁搞。

View 绘制 流程最终调用的是ViewRootImpl中的performTraversals 方法来完成绘制的，performTraversals
中依次调用performMeasure() performLayout() performDraw()

在view post中才可以拿到view的宽高信息，在onCreate或者其他生命周期中也不一定拿到，调用view的post方法可拿到是
因为在view绘制performTraversals中将其利用post方法加入到消息队列中，到执行改方法时候，view的测量流程已经完成，

