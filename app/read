Binder大致的通信过程：
1.一个进程使用BINDERSETCONTEXT_MGR命令通过Binder驱动将自己注册成为ServiceManager
2.Server通过驱动向ServiceManger中注册Binder（Server中的Binder实体）,可以表明对外提供服务，
驱动为这个Binder创建位于内核中的实体点以及ServiceManager对实体的应用，将名字以及新建的引用
打包传给ServiceManager，ServiceManger将其填入查找表
3.Client通过名字，在Binder驱动的帮助下从ServiceManger中获取到对Binder实体的引用，通过对
这个引用就能实现和Server进程通信


Android绘制框架中，CPU的作用主要是负责了视图的测量，计算，布局记录，把内容计算成Polygons多变形或者Texture纹理，
GPU则主要负责把 Polygons或者Textture进行Rasterization栅格化，在屏幕上成像，开启硬件加速后，则GPU分担CPU的
计算任务，CPU会更加专注逻辑任务的处理减轻CPU的负担，是系统运行效率提高

硬件加速的原理：通过底层的软件代码，将CPU不擅长的图形计算转换为GPU专用指令，由GPU完成
硬件加速渲染，就是通过GPU来进行渲染，
硬件加速的过程中包括两个阶段：
（1）构建阶段　遍历所有视图，将需要绘制的操作缓存下来，交给单独的Render 线程使用GPU进行硬件加速绘制（这一阶段在主线程CPU构建）
（2）绘制阶段 调用OpenGl(即使用GPU)对构建好的视图进行绘制渲染，绘制的内容保存在Graphic Buffer并交给
SurfaceFlinger 显示

ThreadedRenderer的主要作用就是在主线程中(CPU)构建视图，并将构建好的视图通知到RenderThread让其使用OpenGl绘制渲染
只有支持并开启硬件加速的View才会关联有RenderNode，同时GPU不是支持所有的2D 所以GPU不支持的绘制命令只能通过软件方式来绘制渲染

布局中去掉重复或者不必要的background能够加快CPU的构建速度，同时能够减轻GPU渲染负担

FileLock进程文件锁，可以控制不同程序对同一文件的并发访问
如果是共享锁 则可以对同一文件进行读操作，不可以进行写操作，写操作会抛出异常
如果是独占所，则同一时间只能有一个线程对其进行读写操作，直到文件锁被释放掉，才可以被其他线程访问，对于操作并发是安全的

头条屏幕适配方案
density = 屏幕宽度 / 设计图宽度  一个view的显示为50dp 系统最终会转换为px  则 50*density
缩放系数为50 * density/屏幕宽度 与view的宽度 50/设计图宽度 一致  view的实际宽度 为 50/设计图宽度 * 50
全局修改density   dp = px / (dpi/160)  density = dpi/160  dpi(像素密度)为160的设备上1dp = 1px

ldpi   density = 0.75 分辨率 240 * 320   关系  dp = px/0.75
mdpi   density = 1    分辨率 320 * 480   dp = px/1
hdpi   density = 1.5  分辨率 480 * 800   dp = px/1.5
xhdpi  density = 2.0  分辨率 720 * 1280  dp = px/2.0
xxhdpi density = 3.0  分辨率 1080 * 1920 dp = px/3.0

Java中的IO流主要是面向流，阻塞式IO NIO主要是面向缓冲，非
阻塞式，支持选择器操作

通过Cache-control 和ETag的配合来实现Http的缓存机制 http2.0二进制分帧
三次握手中的第三次握手是为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误

并发锁的特点就是并发读读不互斥、并发读写互斥、并发写写互斥
线程进入读锁的前提条件是没有其他线程占用写请求或者有写请求但调用线程和持有锁的线程是同一个线程，
线程进入写锁的前提条件是没有其他线程占用读锁，也没有其他线程占用写锁

ReentrantReadWriteLock 不支持锁升级，只支持锁降级，锁降级是对统一线程从写锁变成读锁，锁升级就是
对同意线程从读锁变成写锁，读锁是多线程共享锁，写锁是多线程互斥锁，写锁的并发限制比读锁搞。

View 绘制 流程最终调用的是ViewRootImpl中的performTraversals 方法来完成绘制的，performTraversals
中依次调用performMeasure() performLayout() performDraw()

在view post中才可以拿到view的宽高信息，在onCreate或者其他生命周期中也不一定拿到，调用view的post方法可拿到是
因为在view绘制performTraversals中将其利用post方法加入到消息队列中，到执行改方法时候，view的测量流程已经完成，


Object的wait和notify/notify是与对象监视器配合完成线程间的等待/通知机制，而Condition与Lock配合完成等待通知机制，
前者是java底层级别的，后者是语言级别的，具有更高的可控制性和扩展性。
java 线程Lock锁使用Condition实现线程的等待（await）与通知（signal）
Conditioin与重入锁时是通过Lock中的lock.newCondition方法产生一个与当前重入锁绑定的Condition实例
即：  Lock lock = new ReentrantLock(); Condition condition = lock.newCondition();
public interface Condition{
    //使当前线程加入await（）等待队列中，并释放锁，当其他线程调用signal()会重新请求锁，
    //与Object.await()类似
    void await() throws InterruptedException;
    //调用该方法的前提是，当前线程已经成功获得与该条件对象绑定的重入锁，否则调用该方法时会抛出IllegalMonitorStateException。
    //调用该方法后，结束等待的唯一方法是其它线程调用该条件对象的signal()或signalALL()方法。等待过程中如果当前线程被中断，该方法仍然会继续等待，同时保留该线程的中断状态。
    void awaitUninterruptibly();

    //若指定时间内有其它线程中断该线程，则抛出InterruptedException并清除当前线程的打断状态；若指定时间内未收到通知，则返回0或负数。
     long awaitNanos(long nanosTimeout) throws InterruptedException;

     //与await()基本一致，唯一不同点在于，指定时间之内没有收到signal()或signalALL()信号或者线程中断时该方法会返回false;其它情况返回true。
     boolean await(long time, TimeUnit unit) throws InterruptedException;

     //唤醒一个在 await()等待队列中的线程。与Object.notify()相似
      void signal();

      //唤醒 await()等待队列中所有的线程。与object.notifyAll()相似
      void signalAll();

}


Canvas 有layer层级的概念，缺省情况只有一个layer，可以用saveLayerXXX，Restore等方法创建层级，按照栈方式管理，创建一个新的Layer到
栈中，用saveLayer，saveLayerAlpha，从栈中推出一个Layer，可以使用restore，restoreToCount，当Layer入栈时，后续DrawXXX操作都发生
到这个Layer上，而Layer退栈时，就会把本层绘制的图像绘制到上层或是Canvas中
通过saveLayer方法新建一层级，再通过restoreToCount方法将新层还原回画布，这样就不会对原有的层进行干扰。

Glide的图片加载网络请求最终是在HttpUrlFetcher类中发生的，用的是HttpUrlConnection获取数据流并通过DataFetcher接口中的DataCallback
的onDataReady方法返回出去，最终在DecodeJob中的decodeFromRetrievedData()中待资源加载完成后回调，
在decodeFromRetrievedData（）中调用decodeFromData()方法进行缩放，转换等操作，返回Resource对象,
当resource成功返回即(resource！= null)调用notifyEncodeAndRelease通过DecodeJob加载后对数据后做转换，
缓存等操作，回到EngineJob中，通过onResourceReady（）中的MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, this).sendToTarget();
将其切换到主线程中，调用handleResultOnMainThread(),通过EngineJobListenerde onEngineJobComplete()方法添加到缓存,
最终调用DrawableImageViewTarget的ssetResource()方法将图片设置到ImageView上


LruCache算法核心 = LRU算法 + LinkedHashMap数据结构
LRU Least Recently Used最近最少使用算法 原理 ：当缓存满时，优先淘汰近期最少使用的缓存对象
采用LRU 算法的缓存类型 内存缓存 磁盘缓存

LinkedHashMap  数据结构 = 数组 + 单链表 +双向链表　　双向链表实现了 存储顺序 = 访问顺序 / 插入顺序

java 的反射对象类Class 、Constructor、Field,Method,Package实现了AnnotatedElement 的接口
Annotation 主要分类有三种：1 内置的Annotation  eg:@Override 2 作用于Annotation的Annotation
eg : @Retention @Documented @ Target   @Inherited表示该Annotation可以影响到被标注的类的子类
3 自定义Annotation java1.5以后可以自定义Annotation

APK加固，本质上给原来的apk加了一个空壳，
1、需要加密的Apk(源Apk)
2、壳程序Apk(负责解密Apk工作)
3、加密工具(将源Apk进行加密和壳Dex合并成新的Dex)
主要步骤：我们拿到需要加密的Apk和自己的壳程序Apk，然后用加密算法对源Apk进行加密在将壳Apk进行合并得
到新的Dex文件，最后替换壳程序中的dex文件即可，得到新的Apk,那么这个新的Apk我们也叫作脱壳程序Apk.它
已经不是一个完整意义上的Apk程序了，它的主要工作是：负责解密源Apk.然后加载Apk,让其正常运行起来。

JNI 使用Native库调用load 与loadLibrary方法区别
System.load(String fileName)  System.loadLibrary(String libname)
加载的路径不同；System.load(String filename) 是从作为动态库的本地文件系统中以指定的文件
名加载代码文件，文件名参数必须是完整的路径名且带文件后缀；而 System.loadLibrary(String libname)
是加载由 libname 参数指定的系统库（系统库指的是 java.library.path，可以通过 System.getProperty(String key)
方法查看 java.library.path 指向的目录内容），将库名映射到实际系统库的方法取决于系统实现，
譬如在 Android 平台系统会自动去系统目录、应用 lib 目录下去找 libname 参数拼接了 lib 前缀
的库文件。
是否自动加载库的依赖库；譬如 libA.so 和 libB.so 有依赖关系，如果选择
System.load("/sdcard/path/libA.so")，即使 libB.so 也放在 /sdcard/path/ 路径下，
load 方法还是会因为找不到依赖的 libB.so 文件而失败，因为虚拟机在载入 libA.so 的时候发现它
依赖于 libB.so，那么会先去 java.library.path 下载入 libB.so，而 libB.so 并不位于
 java.library.path 下，所以会报错。解决的方案就是先 System.load("/sdcard/path/libB.so")
  再 System.load("/sdcard/path/libA.so")，但是这种方式不太靠谱，因为必须明确知道依赖关系；
  另一种解决方案就是使用 System.loadLibrary("A")，然后把 libA.so 和 libB.so 都放在
   java.library.path 下即可。


在非静态内部类访问外部私有成员/外部类访问内部类私有成员的时候，对应的外部类/外部类会生成一个静态方法
，用来返回对应私有成员的值，而对应外部类对象/内部类对象通过调用其内部类/外部类提供的静态方法来获取
对应的私有成员的值

过度绘制解决：
1 theme
 <style name="AppTheme" parent="">
 <item name="android.windowBackground">@null</item>
</style>
2 在Activity的onCreate中添加
getWindow().setBackgroundDrawable(null)//如果在设置开屏页面为了防止页面白屏在主题中设置的图片，
要在进入之后将其主题的背景图片置为null
3 移除控件中需要的背景
4 将layout层级扁平化
5 使用Layout Inspector去查看layout的层次结构来优化view的层级
6 使用merge标签减少嵌套 通过<include>标签复用布局
7 使用lint来优化布局的层次结构，要使用lint，点击Analyze> Inspect Code即可
8 减少自定义view的过度绘制，使用clieRect裁剪及相关方法优化，绘制需要绘制的部分
9 使用viewStub标签延迟加载
通过以下代码即可在需要时加载布局：
findViewById(R.id.stub_import)).setVisibility(View.VISIBLE);
或者
View importPanel = ((ViewStub) findViewById(R.id.stub_import)).inflate();
10 onDraw()中不要创建新的局部变量以及不要做耗时操作，因为可能为对此调用
11 使用ConstraintLayout来优化，官方推荐

app启动优化
1 Application onCreate() 优化，对三方的SDK进行懒加载，在用的时候再去初始化
2 Activity onCreate()优化 介绍LaunchActivity的view 的层级，减少绘制时间
黑白屏原因：如果你的application或activity启动的过程太慢，导致系统的BackgroundWindow没有及时被替换，
就会出现启动时白屏或黑屏的情况（取决于你的主题是Dark还是Light）。
解决办法:使用透明主题:
<item name="android:windowIsTranslucent">true</item>
我们在style中自定义一个样式Lancher，在其中放一张背景图片，或是广告图片之类的
<style name="AppTheme.Launcher">
        <item name="android:windowBackground">@drawable/bg</item>
    </style>
把这个样式设置给启动的Activity
<activity
            android:name=".activity.SplashActivity"
            android:screenOrientation="portrait"
            android:theme="@style/AppTheme.Launcher"
            >
然后在Activity的onCreate方法，把Activity设置回原来的主题
    protected void onCreate(Bundle savedInstanceState) {
        //替换为原来的主题，在onCreate之前调用
        setTheme(R.style.AppTheme);
        super.onCreate(savedInstanceState);
    }
这样在启动时就通过给用户看一张图片或是广告来防止黑白屏的尴尬。
这个链接解决的方案地址：https://juejin.im/post/58ad90518ac2472a2ad9b684


ViewRootImpl主要有以下几个功能点：
1 连接WindowManager和DecorView的纽带
2 向DecorView派发输入事件
3 完成view的绘制(measure,layout,draw)
4 负责与WMS的交互通讯，调整窗口大小及布局
view绘制
ViewRootImpl -->setView()-->requestLayout()-->scheduleTraversals(){
   //post一个runnable处理-->mTraversalRunnable
             mChoreographer.postCallback(
                     Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);
                     }
发一个TraversalRunnable ，执行其中的 doTraversal()--> performTraversals();

ViewRootImpl在其创建过程中通过requestLayout()向主线程发送了一条触发遍历操作的消息，遍历操作
是指performTraversals()方法。它是一个包罗万象的方法。ViewRootImpl中接收的各种变化，如来自WmS
的窗口属性变化、来自控件树的尺寸变化及重绘请求等都引发performTraversals()的调用，并在其中完成
处理。View类及其子类中的onMeasure()、onLayout()、onDraw()等回调也都是在performTraversals()
的执行过程中直接或间接的引发。也正是如此，一次次的performTraversals()调用驱动着控件树有条不紊
的工作，一旦此方法无法正常执行，整个控件树都将处于僵死状态。因此performTraversals()函数可以说
是ViewRootImpl的心跳。

performTraversal()中首次调用其中的performMeasure()--->performLayout()-->performDraw()

performMeasure : 会调用View的measure方法，在measure方法中又会调用onMeasure方法，在onMeasure方法中
则会对所有的子元素进行measure过程，这个时候measure流程就从父容器传到子元素中了，这样就完成了一
次measure过程。measure完成以后，可以通过getMeasuredWidth和getMeasureHeight方法来获取到View
测量后的宽高。

performLayout : 和performMeasure同理。Layout过程决定了View的四个顶点的坐标和实际View的宽高，
完成以后，可以通过getTop/Bottom/Left/Right拿到View的四个顶点位置，并可以通过getWidth和
getHeight方法来拿到View的最终宽高。

performDraw : 和performMeasure同理，唯一不同的是，performDraw的传递过程是在draw方法中通过
dispatchDraw来实现的。Draw过程则决定了View的显示，只有draw方法完成以后View的内容才能呈现在
屏幕上。

在view.measure中，当MeasureSpec发生变化时或者强制重新绘制新布局时，才会进行测量。
子view的MeasureSpec==LayoutParams+margin+padding+父容器的MeasureSpec
view的layout过程和measure同理，也是从顶级View开始，递归的完成整个控件树的布局操作
measure过程是后根遍历（DecorView最后setMeasureDeimension()）,所以控件的测量结果影响父控件的测量结果
layout的过程是先根遍历（一开始就调用setFrame()完成DecorView的布局），所以父控件布局结果会影响子控件的布局结果
view的draw绘制过程回遵循以下几步：
1 绘制背景drawBackground 2 绘制自己onDraw  3  如果是ViewGroup则绘制子view，dispatchDraw()
4 绘制装饰（滚动条）和前景，onDrawForeground

Java中单例模式模式经典两种：
静态内部类：
 public class Singleton{
        private static class InnerClass{
            private static Singleton singleton = new Singleton();
        }
        public static Singleton getInstance(){
            return InnerClass.singleton;
        }
        private Singleton(){
        }
    }

    双重锁实现：
      public class Singleton{
            private static volatile Singleton singleton = null;
            public static Singleton getInstance(){
                if(singleton == null){
                    synchronized (Singleton.class) {
                        if(singleton == null){
                            singleton = new Singleton();
                        }
                    }
                }
                return singleton;
            }
            private Singleton(){
            }
        }


ThreadLocal作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数和组件
之间一些公共变量的传递的复杂度。
ThreadLocal实现不当会导致内存泄露,实现原理:每个Thread维护一个ThreadLocalMap映射表，映射表的key是ThreadLocal
本身的实例，value是真正需要存储的Object
ThreadLocal使用内存泄露的原因：
ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部强引用来引用它，
那么系统 GC 的时候，这个ThreadLocal势必会被回收。
这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的
value，如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链
：Thread Ref -> Thread -> ThreaLocalMap -> Entry -> value永远无法回收，造成内存泄漏。
1 使用static的ThreadLocal，延长了ThreadLocal的生命周期，可能导致的内存泄漏。
2 分配使用了ThreadLocal又不再调用get(),set(),remove()方法，那么就会导致内存泄漏。
解决办法：
每次使用完ThreadLocal，都调用它的remove()方法，清除数据。


java多线程---锁优化
1 尽量不要锁住方法
2 缩小同步代码块，只锁数据
3 锁中尽量不要再包含锁（如果有可能导致死锁）
4 将锁私有化，在内部管理锁
5 进行适当的锁分解

设计模式总共有23种，总体分为三大类：创建型，结构型，行为型模式
创建型模式 ： 关注行为对象的创建，同时隐藏创建逻辑,5种，包括：工厂模式，抽象工厂模式，单例模式，建造者模式，原型模式
结构型模式：关注类和对象之间的组合，8种 包括：适配器，过滤型，装饰，享元，代理，外观，组合，桥接
行为型模式:关注对象之间的通信，包括：责任链，命令，中介，观察者，状态，策略，模板，备忘录，迭代器，解释器，访问者

view分发机制 ：down事件 dispatchTouchEvent-->onTouch-->onTouchEvent-->onClick
viewGroup onInterceptToucheEvent return false 默认分发给view，如果拦截 onInterceptTouchEvent return true
后ViewGroup将走自己的触摸事件逻辑

 Java 中 Class.forName()、Class.class、getClass() 三者的理解
Class.forName()形式会装入类并做类的静态初始化，返回Class对象
Class.class会使JVM将使用类装载器将类装入内存（前提是类还没有装入内存），不做类的初始化工作，
返回Class对象.getClass()对类进行静态初始化，非静态初始化，返回引用运行时真正所指的对象（因为子
对象的引用可能会赋给对象的引用变量中）所属的类的Class对象

图片占据内存大小
我们在电脑上看到的 png 格式或者 jpg 格式的图片，png(jpg) 只是这张图片的容器，它们是经过相对应的压缩算法将原图每个
像素点信息转换用另一种数据格式表示，以此达到压缩目的，减少图片文件大小，Bitmap 的大小取决于像素点的数据格式以及分辨率两者了。
图片占用内存：分辨率 * 每个像素点的大小。
大部分场景可以通过 Bitmap的getByteCount() 方法获取当前图片所占用内存的大小
系统在加载res下的资源图片时，会转换，规则：
新图的高度(height) = 原图高度(height)*（设备的dpi/目录对应的dpi）
新图的宽度(width) = 原图宽度（width）*（设备的dpi/目录对应的dpi）
单独从图片本身考虑优化方向：降低分辨率（BitmapFactory.Options.inSampleSize），减少每个像素的大小（将系统自带的ARGB—8888转为RGB—656）


java中打印Array数组内存
1 使用循环打印 2 Array.toString() 3 jDK8的java.uitl.Arrays.stream()  Arrays.stream([]).forEach(System.out : println)
4 Arrays.deepToString() 5 JDK8 的Stream.flatMap()  6 String.join(",", infos)

RecyclerView滑动判断是否滑到底部或者顶部

RecyclerView.canScrollVertically(1)的值表示是否能向上滚动，false表示已经滚动到底部
RecyclerView.canScrollVertically(-1)的值表示是否能向下滚动，false表示已经滚动到顶部

HashTable 线程安全  底层实现 ： 数组 +  链表
HashMap 线程不安全  底层实现 : 数组 + 链表 允许null值和null键，但不提倡使用
它们添加、删除、获取元素时都是先计算hash，根据hash和table.length计算index也就是table数据的下标，
然后进行相应操作

打造一个组件化框架，需要以下7个方面入手：
1 代码解耦。如何将一个庞大的工程分为有机的整体？
2 组件单独运行。因为每个组件都是高度内聚的，是一个完整的整体，如何让其单独运行调试？
3 组件间通行。每个组件具体实现细节都互相不了解，但每个组件都需要给其他调用方提供服务，主项目与组件，组件与组件之间如何通信
4 UI跳转。UI跳转之特殊的数据传递，跟组件间通信区别有什么不同？
5 组件生命周期。 指组件在应用中的存在的时间，组件是否可以按需、动态使用，因此就涉及到组件加载、卸载等管理问题
6 集成调试。在开发阶段如何做到按需编译组件，一次调试中可能有一两个组件参与集成，这样编译时间就会大大降低，提高开发效率
7 代码隔离。 组件之间的交互如果是直接引用的话，那么组件之间根本没有做到解耦，如何从根本上避免组件之间的直接引用，也就是如何
从根本上杜绝耦合的产生

ARouter核心实现思路是在，在代码中添加的@Route注解，会在编译时期通过apt存储path和activityClass映射关系的类文件。
然后app进程启动的时候会拿到这些类文件，把保存这些映射关系的数据读到内存中，
然后在进行路由跳转的时候，通过build()方法传入要到达页面的路由地址，ARouter会通过它自己存储的路由表找到路由地址对应
的Activity.class(activity.class = map.get(path))，然后new Intent()，当调用ARouter的withString()方法它的内部
会调用intent.putExtra(String name, String value)，调用navigation()方法，它的内部会调用startActivity(intent)
进行跳转，这样便可以实现两个相互没有依赖的module顺利的启动对方的Activity了。

ActivityRouter 核心实现思路是，它是通过路由 + 静态方法来实现，在静态方法上加注解来暴露服务，但不支持返回值，且参数
固定位(context, bundle)，基于apt技术，通过注解方式来实现URL打开Activity功能，并支持在WebView和外部浏览器使用，
支持多级Activity跳转，支持Bundle、Uri参数注入并转换参数类型

定位
IP定位  ：适合对精度要求不高的场景，定位容易出现误差大
卫星定位 ：室外定位方式，常见有GPS，北斗，伽利略等
GPS有三个独立的部分组成：
空间部分：24颗工作卫星，不断的发射卫星信号；
地面控制部分：监测和控制卫星运行，编算卫星星历，保持系统时间；
用户设备：接收GPS卫星信号，获得必要的定位信息，经数据处理，完成定位；

GPS定位优缺点
优点：精度高，在十米左右，不需要服务端，可以连续定位；
缺点：耗电，易受建筑物影响，在室内几乎接受不到卫星信号，所以一般用于室外定位导航。

Wifi定位:
WiFi定位的原理是利用每台路由器独有的Mac地址对用户实现定位

插件化
1、加载插件：插件APK通过网络下载下来，用DexClassLoader加载插件APK中的类文件，然后将DexClassLoader中的
Element数组和宿主应用的PathClassLoader的Element数组合并再设置回PathClassLoader，
完成插件APK中类的加载
2、HooK启动流程
插件APK的Activity未曾在AndroidManifest中注册，需要有一个占坑的SubActivity,在启动插件APK的Activity的时候
利用占坑SubActivity绕过验证。在AMS处理完相应验证通知我们ActivityThread创建Activity的时候在替换为PluginAcitivity
AMS创建Activity的通知会先发送到ApplicationThread，然后ApplicationThread会通过Handler去执行相应的逻辑，
在消息分发的时候Handler中会调用handleMessage，在调用handleMessage的之前会通过dispatchMessage分发事件，
可以hook其中的mCallback接口，覆写handleMessage这个方法，然后根据需求拦截改变Message消息，
最后将新的Callback设置给Handler即可
3、启动的是SubActivity，管理插件的生命周期，hook启动后PluginAcitivty会有自己的生命周期
4、初始化插件资源
给插件创建一个Resources，然后插件APK中都通过这个Resource去获取资源，构建AssetManager，调用其中的
addAssetPath去加载对应路径的资源

PopupWindow没有新建一个Window，而是将View加到DecorView上
Dialog是新建了一个window，相当于走了一遍Activity中创建window的流程

Activity中展示视图元素通过window来实现，window可以理解为一个容器，盛放着一个个view，用来执行具体的展示工作
Window 实现了Activity与View的解耦，Activity将视图的全部工作交给Window来处理
WindowManager支持对多条View链的管理
Dialog为什么不能使用Application的Context
Dialog窗口类型为TYPE_APPLICATION与Activity一样，TYPE_APPLICATION要求Token不能为null，
Application没有AppWindowToken


分析ANR 一般是由于主线程阻塞造成的，普通是5s，BroadCastReceiver是10s，则会造成ANR
ANR分析，一般系统会产生一个traces.txt的文件存放在/data/anr/下，通过adb命令导出分析：一般ANR原因:
普通阻塞，CPU满负荷，内存泄漏

内存泄漏:
当应用内部不再需要某个实例后，但是这个对象却仍然被引用，这个情况就叫做内存泄露(Memory Leak)。安卓虚拟机为每一个应用分配一定的内存空间，当内存泄露到达一定的程度就会造成内存溢出。

导致内存泄露常见原因:
1)静态变量直接或者间接地引用了Activity对象就会造成内存泄露
2)Activity使用了静态的View(View会持有Activity的对象的引用)
3)Activity定义了静态View变量???
4)ImageSpan引用了Activity Context
5)单例中引用了Activity的Context(需要使用Application的Context)
6)对于使用了BraodcastReceiver，ContentObserver，File，Cursor，Stream，Bitmap等资源，应该在Activity销毁时及时关闭或者注销，否则这些资源将不会被回收，从而造成内存泄漏。
7)静态集合保存的对象没有及时消除(不使用的时候置为null)
8)在Java中,非静态(匿名)内部类会引用外部类对象,而静态内部类不会引用外部类对象
9)在Activity中,创建了非静态内部类(内部类直接或者间接引用了Activity)的静态成员变量
10)线程包括AsyncTask的使用,Activity退出后线程还在运行(线程在死循环),并且在线程中使用了Activity或view对象(解决方法:不要直接写死循环,可以设置一个布尔类型的TAG,当activity推出的时候,设置TAG为False)
11)Handler对象的使用,Activity退出后Handler还是有消息需要处理(解决方法:在退出activity之后,移除消息)
12)WebView造成的内存泄漏(在onDestory中销毁)
